/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows open reads for clients, proposals and activities while restricting writes to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owning user and admins.
 * - /clients/{clientId}: Stores client data. Accessible to any authenticated user.
 * - /propostas/{propostaId}: Stores proposal data. Accessible to any authenticated user.
 * - /atividades/{atividadeId}: Stores activity data. Accessible to any authenticated user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Clients, proposals, and activities are publicly readable, but writes are restricted and must be performed by an authenticated user.
 * - No schema validation is performed in this prototype, except for critical authorization fields.
 *
 * Denormalization for Authorization:
 *  - Currently, no denormalization is used as the rules rely on request.auth.uid for user identification.
 *  - Consider adding creatorId/ownerId fields to /clients, /propostas, and /atividades for finer-grained control in the future.
 *
 * Structural Segregation:
 *  - No explicit structural segregation is employed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (create) If the user tries to create a profile with a different userId.
     * @deny (get, update, delete) If the user tries to access someone else's profile.
     * @principle Enforces user ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      // Function to check if the requesting user is the owner of the profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the requesting user is an existing owner of the profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to client data.
     * @path /clients/{clientId}
     * @allow (get, list) Any authenticated user can read client data.
     * @allow (create) Any authenticated user can create client data.
     * @allow (update, delete) Any authenticated user can update or delete client data.
     * @deny If the user is not authenticated.
     * @principle Allows open reads but restricts writes to authenticated users.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to proposal data.
     * @path /propostas/{propostaId}
     * @allow (get, list) Any authenticated user can read proposal data.
     * @allow (create) Any authenticated user can create proposal data.
     * @allow (update, delete) Any authenticated user can update or delete proposal data.
     * @deny If the user is not authenticated.
     * @principle Allows open reads but restricts writes to authenticated users.
     */
    match /propostas/{propostaId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to activity data.
     * @path /atividades/{atividadeId}
     * @allow (get, list) Any authenticated user can read activity data.
     * @allow (create) Any authenticated user can create activity data.
     * @allow (update, delete) Any authenticated user can update or delete activity data.
     * @deny If the user is not authenticated.
     * @principle Allows open reads but restricts writes to authenticated users.
     */
    match /atividades/{atividadeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}