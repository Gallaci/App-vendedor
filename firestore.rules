/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-based authorization.
 * It avoids overly strict schema validation to facilitate rapid prototyping and data exploration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user can access their own profile.
 * - /clients/{clientId}: Stores client data. Only authenticated users can access this collection.
 * - /propostas/{propostaId}: Stores sales proposal data. Only authenticated users can access this collection.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is minimal, focusing on authorization-critical fields.
 * - All write operations require a verified authenticated user.
 *
 * Denormalization for Authorization:
 *  - The `UserProfile` entity includes a `role` field to avoid needing to look up roles in a separate collection.
 *  - The `Proposta` and `Cliente` entities do not contain a user ID to link who created the content.
 *
 * Structural Segregation:
 *  - Public and private data are not mixed within the same collection. User profiles are stored under `/users/{userId}`, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile documents.
     * @path /users/{userId}
     * @allow (create) If the user's auth UID matches the userId, allowing self-creation.
     * @allow (get, update, delete) If the user is the owner of the profile.
     * @deny (list) Listing all users is not allowed.
     * @deny (create, update, delete) If the user is not authenticated.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures client documents.
     * @path /clients/{clientId}
     * @allow (create, get, list, update, delete) If the user is authenticated.
     * @deny If the user is not authenticated.
     * @principle Requires authentication for any data access to the clients collection.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures sales proposal documents.
     * @path /propostas/{propostaId}
     * @allow (create, get, list, update, delete) If the user is authenticated.
     * @deny If the user is not authenticated.
     * @principle Requires authentication for any data access to the proposals collection.
     */
    match /propostas/{propostaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}