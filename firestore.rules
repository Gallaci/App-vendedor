/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves.
 * - /clientes/{clienteId}: Stores client information. Listing is restricted to administrators, and creation, updates, and deletes are restricted to administrators only.
 * - /produtos/{produtoId}: Stores product information. Listing is restricted to administrators, and creation, updates, and deletes are restricted to administrators only.
 * - /vendas/{vendaId}: Stores sale information. Listing is restricted to administrators, and creation, updates, and deletes are restricted to administrators only.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Listing of users is disallowed.
 * - Clients, Products, and Sales are only accessible by administrators.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for clients.
     * @path /clientes/{clienteId}
     * @allow (list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts access to clients to administrators only.
     */
    match /clientes/{clienteId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces access control for products.
     * @path /produtos/{produtoId}
     * @allow (list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts access to products to administrators only.
     */
    match /produtos/{produtoId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces access control for sales.
     * @path /vendas/{vendaId}
     * @allow (list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts access to sales to administrators only.
     */
    match /vendas/{vendaId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}