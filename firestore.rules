/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It enforces a role-based access control model, with 'admin' having full access and 'vendedor' having more limited access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with roles determining access levels.
 * - /clients/{clientId}: Stores client information, accessible to 'vendedor' and 'admin' roles.
 * - /propostas/{propostaId}: Stores sales proposals, accessible to 'vendedor' and 'admin' roles.
 * - /atividades/{atividadeId}: Stores activities, accessible to 'vendedor' and 'admin' roles.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All writes are explicitly authorized based on user roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is a vendedor.
     */
    function isVendedor() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendedor';
    }

    /**
     * @description Checks if the user is an existing owner (signed in and document exists).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's ID matches the requested user ID.
     * @allow (get, update, delete) - If the user's ID matches the requested user ID.
     * @deny (create) - If the user's ID does not match the requested user ID.
     * @deny (get, update, delete) - If the user's ID does not match the requested user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for clients.
     * @path /clients/{clientId}
     * @allow (create) - If the user is a vendedor or an admin, and the createdBy field matches the user's email.
     * @allow (get, list, update, delete) - If the user is a vendedor or an admin.
     * @deny (create) - If the user is not a vendedor or an admin, or the createdBy field does not match the user's email.
     * @deny (get, list, update, delete) - If the user is not a vendedor or an admin.
     * @principle Allows vendedores and admins to manage client data.
     */
    match /clients/{clientId} {
      allow get: if isVendedor() || isAdmin();
      allow list: if isVendedor() || isAdmin();
      allow create: if (isVendedor() || isAdmin());
      allow update: if isVendedor() || isAdmin();
      allow delete: if isVendedor() || isAdmin();
    }

    /**
     * @description Rules for propostas.
     * @path /propostas/{propostaId}
     * @allow (create, get, list, update, delete) - If the user is a vendedor or an admin.
     * @deny (create, get, list, update, delete) - If the user is not a vendedor or an admin.
     */
    match /propostas/{propostaId} {
      allow get: if isVendedor() || isAdmin();
      allow list: if isVendedor() || isAdmin();
      allow create: if isVendedor() || isAdmin();
      allow update: if isVendedor() || isAdmin();
      allow delete: if isVendedor() || isAdmin();
    }

    /**
     * @description Rules for atividades.
     * @path /atividades/{atividadeId}
     * @allow (create, get, list, update, delete) - If the user is a vendedor or an admin.
     * @deny (create, get, list, update, delete) - If the user is not a vendedor or an admin.
     */
    match /atividades/{atividadeId} {
      allow get: if isVendedor() || isAdmin();
      allow list: if isVendedor() || isAdmin();
      allow create: if isVendedor() || isAdmin();
      allow update: if isVendedor() || isAdmin();
      allow delete: if isVendedor() || isAdmin();
    }
  }
}