rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the current user is the owner of the existing resource.
     *              This function also verifies that the resource exists.
     * @param {string} userId The user ID to compare against the resource's data.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && resource.data.userId == request.auth.uid;
    }


    /**
     * @description Checks if the current user has the 'admin' role.
     * @return {bool} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

        /**
     * @description Checks if the current user has the 'vendedor' role.
     * @return {bool} True if the user has the 'vendedor' role, false otherwise.
     */
    function isVendedor() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendedor';
    }

    match /users/{userId} {
      /**
       * @description Manages user profile information.
       * @path /users/{userId}
       * @allow (create) User with ID 'user123' can create their profile.
       *        request.auth.uid == 'user123'
       * @allow (get) Admin user can read any user profile.
       *        request.auth.uid == 'admin123'
       * @deny (create) User with ID 'user123' cannot create a profile with a different ID.
       *       request.auth.uid == 'user456'
       * @deny (update) User with ID 'user123' cannot update another user's profile.
       *       request.auth.uid == 'user456'
       * @principle Enforces user-ownership for profile data and admin override.
       */
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false;
    }

    match /clients/{clientId} {
      /**
       * @description Manages client documents.
       * @path /clients/{clientId}
       * @allow (get) Any user can read client data.
       * @allow (create) Signed-in user can create a new client.
       * @allow (update) Signed-in user can update an existing client.
       * @deny (delete) Only the creator can delete a client.
       * @deny (create) Unauthenticated user cannot create a client.
       * @principle Public read, owner-only writes with signed-in requirement.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    match /propostas/{propostaId} {
      /**
       * @description Manages sales proposal documents.
       * @path /propostas/{propostaId}
       * @allow (get) Any user can read proposal data.
       * @allow (create) Signed-in user can create a new proposal.
       * @allow (update) Signed-in user can update an existing proposal.
       * @deny (delete) Only the creator can delete a proposal.
       * @deny (create) Unauthenticated user cannot create a proposal.
       * @principle Public read, owner-only writes with signed-in requirement.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    match /atividades/{atividadeId} {
      /**
       * @description Manages activity documents.
       * @path /atividades/{atividadeId}
       * @allow (get) Any user can read activity data.
       * @allow (create) Signed-in user can create a new activity.
       * @allow (update) Signed-in user can update an existing activity.
       * @deny (delete) Only the creator can delete an activity.
       * @deny (create) Unauthenticated user cannot create an activity.
       * @principle Public read, owner-only writes with signed-in requirement.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}